/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectoaplicada3;

import java.awt.BorderLayout;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;

/**
 *
 * @author Mariano&Massy
 */
public class Inicio extends javax.swing.JFrame {

    String funcion = "";
    double errorPermitido = 0;
    double inferior = 0;
    double intermedio=0;
    double superior = 0;
    double valorR;
    double valorHO=0;
    double valorH1=0;
    double valorDeltaO=0;
    double valorDelta1=0;
    double vA=0;
    double vB=0;
    double vC=0;
    double valorFAxFR;
    double valorTotalFA = 0;
    double valorTotalFB = 0;
    double valorTotalFR = 0;
    public String[] nombresColumnas;
    public Object[][] datosFila;
    public Inicio() {
        initComponents();//Iniciamos los componentes del Frame
        this.setLocationRelativeTo(null);//Centramos nuestro frame

        setTitle("Metodos Numericos");
        //holaa//h
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane6 = new javax.swing.JTabbedPane();
        jDesktopPane2 = new javax.swing.JDesktopPane();
        jPanel2 = new javax.swing.JPanel();
        BenviarButton = new javax.swing.JButton();
        Bingreso = new javax.swing.JLabel();
        Biteraciones = new javax.swing.JLabel();
        BerrorText = new javax.swing.JTextField();
        BlimInferior = new javax.swing.JLabel();
        BinferiorText = new javax.swing.JTextField();
        BlimSuperior = new javax.swing.JLabel();
        BsuperiorText = new javax.swing.JTextField();
        BlimpiarButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        formulaErrorAbsoluto1 = new javax.swing.JLabel();
        T1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        biseccionTable = new javax.swing.JTextArea();
        botonLimpiar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textoExtra = new javax.swing.JTextArea();
        tituloTextoExtra = new javax.swing.JLabel();
        jDesktopPane3 = new javax.swing.JDesktopPane();
        jPanel3 = new javax.swing.JPanel();
        SenviarButton = new javax.swing.JButton();
        Singreso = new javax.swing.JLabel();
        Siteraciones = new javax.swing.JLabel();
        SerrorText = new javax.swing.JTextField();
        SlimInferior = new javax.swing.JLabel();
        SinferiorText = new javax.swing.JTextField();
        SlimSuperior = new javax.swing.JLabel();
        SsuperiorText = new javax.swing.JTextField();
        SlimpiarButton = new javax.swing.JButton();
        T2 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        secanteTable = new javax.swing.JTextArea();
        botonLimpiar1 = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        textoExtra1 = new javax.swing.JTextArea();
        tituloTextoExtra1 = new javax.swing.JLabel();
        formulaErrorAbsoluto2 = new javax.swing.JLabel();
        jDesktopPane4 = new javax.swing.JDesktopPane();
        jPanel4 = new javax.swing.JPanel();
        FenviarButton = new javax.swing.JButton();
        Fingreso = new javax.swing.JLabel();
        Fiteraciones = new javax.swing.JLabel();
        FerrorText = new javax.swing.JTextField();
        FlimInferior = new javax.swing.JLabel();
        FinferiorText = new javax.swing.JTextField();
        FlimSuperior = new javax.swing.JLabel();
        FsuperiorText = new javax.swing.JTextField();
        FlimpiarButton = new javax.swing.JButton();
        T3 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        falsaPosicionTable = new javax.swing.JTextArea();
        botonLimpiar2 = new javax.swing.JButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        textoExtra2 = new javax.swing.JTextArea();
        tituloTextoExtra2 = new javax.swing.JLabel();
        formulaErrorAbsoluto3 = new javax.swing.JLabel();
        jDesktopPane6 = new javax.swing.JDesktopPane();
        jPanel6 = new javax.swing.JPanel();
        NenviarButton = new javax.swing.JButton();
        Ningreso = new javax.swing.JLabel();
        Niteraciones = new javax.swing.JLabel();
        NerrorText = new javax.swing.JTextField();
        NlimInferior = new javax.swing.JLabel();
        NinferiorText = new javax.swing.JTextField();
        NlimpiarButton = new javax.swing.JButton();
        T5 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        newtonTable = new javax.swing.JTextArea();
        botonLimpiar3 = new javax.swing.JButton();
        jScrollPane12 = new javax.swing.JScrollPane();
        textoExtra3 = new javax.swing.JTextArea();
        tituloTextoExtra3 = new javax.swing.JLabel();
        formulaErrorAbsoluto4 = new javax.swing.JLabel();
        jDesktopPane7 = new javax.swing.JDesktopPane();
        jPanel7 = new javax.swing.JPanel();
        MenviarButton = new javax.swing.JButton();
        Mingreso = new javax.swing.JLabel();
        Miteraciones = new javax.swing.JLabel();
        MerrorText = new javax.swing.JTextField();
        MlimInferior = new javax.swing.JLabel();
        MinferiorText = new javax.swing.JTextField();
        MlimSuperior = new javax.swing.JLabel();
        MsuperiorText = new javax.swing.JTextField();
        MlimpiarButton = new javax.swing.JButton();
        MlimIntermedio = new javax.swing.JLabel();
        MintermedioText = new javax.swing.JTextField();
        T6 = new javax.swing.JLabel();
        jScrollPane13 = new javax.swing.JScrollPane();
        mullerTable = new javax.swing.JTextArea();
        botonLimpiar4 = new javax.swing.JButton();
        jScrollPane14 = new javax.swing.JScrollPane();
        textoExtra4 = new javax.swing.JTextArea();
        tituloTextoExtra4 = new javax.swing.JLabel();
        formulaErrorAbsoluto5 = new javax.swing.JLabel();
        SalirDelSistema = new javax.swing.JButton();
        logo = new javax.swing.JLabel();
        logo1 = new javax.swing.JLabel();
        logo3 = new javax.swing.JLabel();
        logo2 = new javax.swing.JLabel();
        SalirDelSistema1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 255, 153));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jDesktopPane2.setBackground(new java.awt.Color(51, 255, 255));
        jDesktopPane2.setForeground(new java.awt.Color(255, 255, 255));
        jDesktopPane2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(204, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        BenviarButton.setBackground(new java.awt.Color(255, 255, 0));
        BenviarButton.setForeground(new java.awt.Color(0, 0, 0));
        BenviarButton.setText("INGRESAR FUNCION");
        BenviarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BenviarButtonActionPerformed(evt);
            }
        });

        Bingreso.setForeground(new java.awt.Color(0, 0, 0));
        Bingreso.setText("Ingrese los siguientes datos");

        Biteraciones.setForeground(new java.awt.Color(0, 0, 0));
        Biteraciones.setText("Iteraciones a realizar");

        BerrorText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                BerrorTextKeyTyped(evt);
            }
        });

        BlimInferior.setForeground(new java.awt.Color(0, 0, 0));
        BlimInferior.setText("Limite Inferior:");

        BinferiorText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BinferiorTextActionPerformed(evt);
            }
        });
        BinferiorText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                BinferiorTextKeyTyped(evt);
            }
        });

        BlimSuperior.setForeground(new java.awt.Color(0, 0, 0));
        BlimSuperior.setText("Limite Superior:");

        BsuperiorText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                BsuperiorTextKeyTyped(evt);
            }
        });

        BlimpiarButton.setBackground(new java.awt.Color(255, 255, 0));
        BlimpiarButton.setForeground(new java.awt.Color(0, 0, 0));
        BlimpiarButton.setText("LIMPIAR DATOS");
        BlimpiarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlimpiarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(Bingreso, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(BenviarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BlimpiarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Biteraciones, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BlimInferior)
                            .addComponent(BlimSuperior))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(BerrorText)
                            .addComponent(BinferiorText)
                            .addComponent(BsuperiorText, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Bingreso)
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Biteraciones)
                    .addComponent(BerrorText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BlimInferior)
                    .addComponent(BinferiorText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BlimSuperior)
                    .addComponent(BsuperiorText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BenviarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BlimpiarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jDesktopPane2.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 377, 270));
        jDesktopPane2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(324, 498, -1, -1));

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 324, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );

        jDesktopPane2.add(jLayeredPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(54, 558, -1, -1));

        formulaErrorAbsoluto1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/1.jpeg"))); // NOI18N
        jDesktopPane2.add(formulaErrorAbsoluto1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 430, 300, 50));

        T1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Bisec.png"))); // NOI18N
        T1.setToolTipText("");
        jDesktopPane2.add(T1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 10, 550, 60));

        biseccionTable.setColumns(20);
        biseccionTable.setRows(5);
        jScrollPane4.setViewportView(biseccionTable);

        jDesktopPane2.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 100, 480, 410));

        botonLimpiar.setBackground(new java.awt.Color(255, 255, 0));
        botonLimpiar.setForeground(new java.awt.Color(0, 0, 0));
        botonLimpiar.setText("LIMPIAR DATOS");
        botonLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLimpiarActionPerformed(evt);
            }
        });
        jDesktopPane2.add(botonLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 410, -1, 70));

        textoExtra.setColumns(20);
        textoExtra.setRows(5);
        jScrollPane1.setViewportView(textoExtra);

        jDesktopPane2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 140, -1, 240));

        tituloTextoExtra.setForeground(new java.awt.Color(0, 0, 0));
        tituloTextoExtra.setText("Anotaciones propias");
        jDesktopPane2.add(tituloTextoExtra, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 110, -1, -1));

        jTabbedPane6.addTab("Método de Bisección", jDesktopPane2);

        jDesktopPane3.setBackground(new java.awt.Color(51, 255, 255));
        jDesktopPane3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(204, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        SenviarButton.setBackground(new java.awt.Color(255, 255, 0));
        SenviarButton.setForeground(new java.awt.Color(0, 0, 0));
        SenviarButton.setText("INGRESAR FUNCION");
        SenviarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SenviarButtonActionPerformed(evt);
            }
        });

        Singreso.setForeground(new java.awt.Color(0, 0, 0));
        Singreso.setText("Ingrese los siguientes datos");

        Siteraciones.setForeground(new java.awt.Color(0, 0, 0));
        Siteraciones.setText("Iteraciones a realizar");

        SerrorText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                SerrorTextKeyTyped(evt);
            }
        });

        SlimInferior.setForeground(new java.awt.Color(0, 0, 0));
        SlimInferior.setText("Limite Inferior:");

        SinferiorText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SinferiorTextActionPerformed(evt);
            }
        });
        SinferiorText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                SinferiorTextKeyTyped(evt);
            }
        });

        SlimSuperior.setForeground(new java.awt.Color(0, 0, 0));
        SlimSuperior.setText("Limite Superior:");

        SsuperiorText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                SsuperiorTextKeyTyped(evt);
            }
        });

        SlimpiarButton.setBackground(new java.awt.Color(255, 255, 0));
        SlimpiarButton.setForeground(new java.awt.Color(0, 0, 0));
        SlimpiarButton.setText("LIMPIAR DATOS");
        SlimpiarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SlimpiarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(Singreso, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(SenviarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SlimpiarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Siteraciones, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SlimInferior)
                            .addComponent(SlimSuperior))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SerrorText)
                            .addComponent(SinferiorText)
                            .addComponent(SsuperiorText, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Singreso)
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Siteraciones)
                    .addComponent(SerrorText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SlimInferior)
                    .addComponent(SinferiorText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SlimSuperior)
                    .addComponent(SsuperiorText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SenviarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SlimpiarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jDesktopPane3.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 377, 270));

        T2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Sec.png"))); // NOI18N
        T2.setToolTipText("");
        jDesktopPane3.add(T2, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 10, 690, 60));

        secanteTable.setColumns(20);
        secanteTable.setRows(5);
        jScrollPane7.setViewportView(secanteTable);

        jDesktopPane3.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 100, 480, 410));

        botonLimpiar1.setBackground(new java.awt.Color(255, 255, 0));
        botonLimpiar1.setForeground(new java.awt.Color(0, 0, 0));
        botonLimpiar1.setText("LIMPIAR RESULTADOS");
        botonLimpiar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLimpiar1ActionPerformed(evt);
            }
        });
        jDesktopPane3.add(botonLimpiar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 410, -1, 70));

        textoExtra1.setColumns(20);
        textoExtra1.setRows(5);
        jScrollPane8.setViewportView(textoExtra1);

        jDesktopPane3.add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 140, -1, 240));

        tituloTextoExtra1.setForeground(new java.awt.Color(0, 0, 0));
        tituloTextoExtra1.setText("Anotaciones propias");
        jDesktopPane3.add(tituloTextoExtra1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 110, -1, -1));

        formulaErrorAbsoluto2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/secante.png"))); // NOI18N
        jDesktopPane3.add(formulaErrorAbsoluto2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 410, 450, 90));

        jTabbedPane6.addTab("Método de Recta Secante", jDesktopPane3);

        jDesktopPane4.setBackground(new java.awt.Color(51, 255, 255));
        jDesktopPane4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(204, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        FenviarButton.setBackground(new java.awt.Color(255, 255, 0));
        FenviarButton.setForeground(new java.awt.Color(0, 0, 0));
        FenviarButton.setText("INGRESAR FUNCION");
        FenviarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FenviarButtonActionPerformed(evt);
            }
        });

        Fingreso.setForeground(new java.awt.Color(0, 0, 0));
        Fingreso.setText("Ingrese los siguientes datos");

        Fiteraciones.setForeground(new java.awt.Color(0, 0, 0));
        Fiteraciones.setText("Iteraciones a realizar");

        FerrorText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FerrorTextKeyTyped(evt);
            }
        });

        FlimInferior.setForeground(new java.awt.Color(0, 0, 0));
        FlimInferior.setText("Limite Inferior:");

        FinferiorText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FinferiorTextActionPerformed(evt);
            }
        });
        FinferiorText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FinferiorTextKeyTyped(evt);
            }
        });

        FlimSuperior.setForeground(new java.awt.Color(0, 0, 0));
        FlimSuperior.setText("Limite Superior:");

        FsuperiorText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                FsuperiorTextKeyTyped(evt);
            }
        });

        FlimpiarButton.setBackground(new java.awt.Color(255, 255, 0));
        FlimpiarButton.setForeground(new java.awt.Color(0, 0, 0));
        FlimpiarButton.setText("LIMPIAR DATOS");
        FlimpiarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FlimpiarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(Fingreso, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(FenviarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FlimpiarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Fiteraciones, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FlimInferior)
                            .addComponent(FlimSuperior))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(FerrorText)
                            .addComponent(FinferiorText)
                            .addComponent(FsuperiorText, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Fingreso)
                .addGap(27, 27, 27)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Fiteraciones)
                    .addComponent(FerrorText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FlimInferior)
                    .addComponent(FinferiorText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FlimSuperior)
                    .addComponent(FsuperiorText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FenviarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FlimpiarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jDesktopPane4.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 377, 270));

        T3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/PosFalsa.png"))); // NOI18N
        T3.setToolTipText("");
        jDesktopPane4.add(T3, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 10, 690, 60));

        falsaPosicionTable.setColumns(20);
        falsaPosicionTable.setRows(5);
        jScrollPane9.setViewportView(falsaPosicionTable);

        jDesktopPane4.add(jScrollPane9, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 100, 480, 410));

        botonLimpiar2.setBackground(new java.awt.Color(255, 255, 0));
        botonLimpiar2.setForeground(new java.awt.Color(0, 0, 0));
        botonLimpiar2.setText("LIMPIAR RESULTADOS");
        botonLimpiar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLimpiar2ActionPerformed(evt);
            }
        });
        jDesktopPane4.add(botonLimpiar2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 410, -1, 70));

        textoExtra2.setColumns(20);
        textoExtra2.setRows(5);
        jScrollPane10.setViewportView(textoExtra2);

        jDesktopPane4.add(jScrollPane10, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 140, -1, 240));

        tituloTextoExtra2.setForeground(new java.awt.Color(0, 0, 0));
        tituloTextoExtra2.setText("Anotaciones propias");
        jDesktopPane4.add(tituloTextoExtra2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 110, -1, -1));

        formulaErrorAbsoluto3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/falsa.png"))); // NOI18N
        jDesktopPane4.add(formulaErrorAbsoluto3, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 410, 480, 90));

        jTabbedPane6.addTab("Método de Falsa Posición", jDesktopPane4);

        jDesktopPane6.setBackground(new java.awt.Color(51, 255, 255));
        jDesktopPane6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel6.setBackground(new java.awt.Color(204, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        NenviarButton.setBackground(new java.awt.Color(255, 255, 0));
        NenviarButton.setForeground(new java.awt.Color(0, 0, 0));
        NenviarButton.setText("INGRESAR FUNCION");
        NenviarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NenviarButtonActionPerformed(evt);
            }
        });

        Ningreso.setForeground(new java.awt.Color(0, 0, 0));
        Ningreso.setText("Ingrese los siguientes datos");

        Niteraciones.setForeground(new java.awt.Color(0, 0, 0));
        Niteraciones.setText("Iteraciones a realizar");

        NerrorText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NerrorTextKeyTyped(evt);
            }
        });

        NlimInferior.setForeground(new java.awt.Color(0, 0, 0));
        NlimInferior.setText("Valor cercano a raiz:");

        NinferiorText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NinferiorTextActionPerformed(evt);
            }
        });
        NinferiorText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                NinferiorTextKeyTyped(evt);
            }
        });

        NlimpiarButton.setBackground(new java.awt.Color(255, 255, 0));
        NlimpiarButton.setForeground(new java.awt.Color(0, 0, 0));
        NlimpiarButton.setText("LIMPIAR DATOS");
        NlimpiarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NlimpiarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(Ningreso, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(NenviarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(NlimpiarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Niteraciones, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NlimInferior))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(NerrorText, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                            .addComponent(NinferiorText))))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Ningreso)
                .addGap(27, 27, 27)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Niteraciones)
                    .addComponent(NerrorText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NlimInferior)
                    .addComponent(NinferiorText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NenviarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NlimpiarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jDesktopPane6.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 377, 230));

        T5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Newton.png"))); // NOI18N
        T5.setToolTipText("");
        jDesktopPane6.add(T5, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 10, -1, 60));

        newtonTable.setColumns(20);
        newtonTable.setRows(5);
        jScrollPane11.setViewportView(newtonTable);

        jDesktopPane6.add(jScrollPane11, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 100, 480, 410));

        botonLimpiar3.setBackground(new java.awt.Color(255, 255, 0));
        botonLimpiar3.setForeground(new java.awt.Color(0, 0, 0));
        botonLimpiar3.setText("LIMPIAR RESULTADOS");
        botonLimpiar3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLimpiar3ActionPerformed(evt);
            }
        });
        jDesktopPane6.add(botonLimpiar3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 410, -1, 70));

        textoExtra3.setColumns(20);
        textoExtra3.setRows(5);
        jScrollPane12.setViewportView(textoExtra3);

        jDesktopPane6.add(jScrollPane12, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 140, -1, 240));

        tituloTextoExtra3.setForeground(new java.awt.Color(0, 0, 0));
        tituloTextoExtra3.setText("Anotaciones propias");
        jDesktopPane6.add(tituloTextoExtra3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 110, -1, -1));

        formulaErrorAbsoluto4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/newton_1.png"))); // NOI18N
        jDesktopPane6.add(formulaErrorAbsoluto4, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 390, 340, 90));

        jTabbedPane6.addTab("Método de Newton-Raphson", jDesktopPane6);

        jDesktopPane7.setBackground(new java.awt.Color(51, 255, 255));
        jDesktopPane7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel7.setBackground(new java.awt.Color(204, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        MenviarButton.setBackground(new java.awt.Color(255, 255, 0));
        MenviarButton.setForeground(new java.awt.Color(0, 0, 0));
        MenviarButton.setText("INGRESAR FUNCION");
        MenviarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenviarButtonActionPerformed(evt);
            }
        });

        Mingreso.setForeground(new java.awt.Color(0, 0, 0));
        Mingreso.setText("Ingrese los siguientes datos");

        Miteraciones.setForeground(new java.awt.Color(0, 0, 0));
        Miteraciones.setText("Iteraciones a realizar");

        MerrorText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                MerrorTextKeyTyped(evt);
            }
        });

        MlimInferior.setForeground(new java.awt.Color(0, 0, 0));
        MlimInferior.setText("Limite Inferior:");

        MinferiorText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MinferiorTextActionPerformed(evt);
            }
        });
        MinferiorText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                MinferiorTextKeyTyped(evt);
            }
        });

        MlimSuperior.setForeground(new java.awt.Color(0, 0, 0));
        MlimSuperior.setText("Limite Superior:");

        MsuperiorText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                MsuperiorTextKeyTyped(evt);
            }
        });

        MlimpiarButton.setBackground(new java.awt.Color(255, 255, 0));
        MlimpiarButton.setForeground(new java.awt.Color(0, 0, 0));
        MlimpiarButton.setText("LIMPIAR DATOS");
        MlimpiarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MlimpiarButtonActionPerformed(evt);
            }
        });

        MlimIntermedio.setForeground(new java.awt.Color(0, 0, 0));
        MlimIntermedio.setText("Limite Intermedio:");

        MintermedioText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                MintermedioTextKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(Mingreso, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(MlimIntermedio, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MintermedioText, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(MenviarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MlimpiarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Miteraciones, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MlimInferior)
                            .addComponent(MlimSuperior))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(MerrorText)
                            .addComponent(MinferiorText)
                            .addComponent(MsuperiorText, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Mingreso)
                .addGap(27, 27, 27)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Miteraciones)
                    .addComponent(MerrorText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MlimInferior)
                    .addComponent(MinferiorText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MintermedioText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MlimIntermedio))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MlimSuperior)
                    .addComponent(MsuperiorText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MenviarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MlimpiarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jDesktopPane7.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 377, 310));

        T6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Muller.png"))); // NOI18N
        T6.setToolTipText("");
        jDesktopPane7.add(T6, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 10, 550, 60));

        mullerTable.setColumns(20);
        mullerTable.setRows(5);
        jScrollPane13.setViewportView(mullerTable);

        jDesktopPane7.add(jScrollPane13, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 90, 480, 410));

        botonLimpiar4.setBackground(new java.awt.Color(255, 255, 0));
        botonLimpiar4.setForeground(new java.awt.Color(0, 0, 0));
        botonLimpiar4.setText("LIMPIAR RESULTADOS");
        botonLimpiar4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLimpiar4ActionPerformed(evt);
            }
        });
        jDesktopPane7.add(botonLimpiar4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 410, -1, 70));

        textoExtra4.setColumns(20);
        textoExtra4.setRows(5);
        jScrollPane14.setViewportView(textoExtra4);

        jDesktopPane7.add(jScrollPane14, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 140, -1, 240));

        tituloTextoExtra4.setForeground(new java.awt.Color(0, 0, 0));
        tituloTextoExtra4.setText("Anotaciones propias");
        jDesktopPane7.add(tituloTextoExtra4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 110, -1, -1));

        formulaErrorAbsoluto5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/muller02.png"))); // NOI18N
        jDesktopPane7.add(formulaErrorAbsoluto5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 430, 770, 90));

        jTabbedPane6.addTab("Método de Müller", jDesktopPane7);

        jPanel1.add(jTabbedPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 18, -1, 564));

        SalirDelSistema.setBackground(new java.awt.Color(255, 0, 0));
        SalirDelSistema.setFont(new java.awt.Font("Engravers MT", 1, 14)); // NOI18N
        SalirDelSistema.setForeground(new java.awt.Color(0, 0, 0));
        SalirDelSistema.setText("Salir");
        SalirDelSistema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirDelSistemaActionPerformed(evt);
            }
        });
        jPanel1.add(SalirDelSistema, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 590, 158, 44));

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Mlogo.jpg"))); // NOI18N
        jPanel1.add(logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 600, -1, -1));

        logo1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Mlogo.jpg"))); // NOI18N
        jPanel1.add(logo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 600, -1, -1));

        logo3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Metodos.png"))); // NOI18N
        jPanel1.add(logo3, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 590, -1, 50));

        logo2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Numericos.png"))); // NOI18N
        jPanel1.add(logo2, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 580, -1, 60));

        SalirDelSistema1.setBackground(new java.awt.Color(0, 153, 0));
        SalirDelSistema1.setFont(new java.awt.Font("Engravers MT", 1, 14)); // NOI18N
        SalirDelSistema1.setForeground(new java.awt.Color(0, 0, 0));
        SalirDelSistema1.setText("Formulario excel");
        SalirDelSistema1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirDelSistema1ActionPerformed(evt);
            }
        });
        jPanel1.add(SalirDelSistema1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 590, 260, 44));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SalirDelSistemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirDelSistemaActionPerformed
        JOptionPane.showMessageDialog(null, "Vuelve pronto, que tengas buen dia");
        System.exit(0);
    }//GEN-LAST:event_SalirDelSistemaActionPerformed

    private void MintermedioTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MintermedioTextKeyTyped
        //Combinacion de que la tecla se presione y se suelte
        char comprobarSiEsLetra = evt.getKeyChar();//Creamos variable tipo caracter para que no pueda escribir letras
        if(Character.isLetter(comprobarSiEsLetra)){//Comprobamos si el usuario escribe letras
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir letras, unicamente digitos");//Mensaje condicional no escribir letras
        }
    }//GEN-LAST:event_MintermedioTextKeyTyped

    private void MlimpiarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MlimpiarButtonActionPerformed
        MerrorText.setText("");
        MinferiorText.setText("");
        MintermedioText.setText("");
        MsuperiorText.setText("");
    }//GEN-LAST:event_MlimpiarButtonActionPerformed

    private void MsuperiorTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MsuperiorTextKeyTyped
        //Combinacion de que la tecla se presione y se suelte
        char comprobarSiEsLetra = evt.getKeyChar();//Creamos variable tipo caracter para que no pueda escribir letras
        if(Character.isLetter(comprobarSiEsLetra)){//Comprobamos si el usuario escribe letras
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir letras, unicamente digitos");//Mensaje condicional no escribir letras
        }
    }//GEN-LAST:event_MsuperiorTextKeyTyped

    private void MinferiorTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MinferiorTextKeyTyped
        //Combinacion de que la tecla se presione y se suelte
        char comprobarSiEsLetra = evt.getKeyChar();//Creamos variable tipo caracter para que no pueda escribir letras
        if(Character.isLetter(comprobarSiEsLetra)){//Comprobamos si el usuario escribe letras
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir letras, unicamente digitos");//Mensaje condicional no escribir letras
        }
    }//GEN-LAST:event_MinferiorTextKeyTyped

    private void MinferiorTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MinferiorTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MinferiorTextActionPerformed

    private void MerrorTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MerrorTextKeyTyped
        //Combinacion de que la tecla se presione y se suelte
        char comprobarSiEsLetra = evt.getKeyChar();//Creamos variable tipo caracter para que no pueda escribir letras
        if(Character.isLetter(comprobarSiEsLetra)){//Comprobamos si el usuario escribe letras
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir letras, unicamente digitos");//Mensaje condicional no escribir letras
        }
    }//GEN-LAST:event_MerrorTextKeyTyped

    private void MenviarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenviarButtonActionPerformed
        double resultadoValorConX = 0;
        double resultadoValorExponente = 0;
        double funcionFA;
        double funcionFB = 0;
        double funcionFR;
        double valorR = 0;
        double valorFAxFR = 0;
        double valorTotalFA = 0;
        double valorTotalFB = 0;
        double valorTotalFR = 0;
        double errorAbsoluto=0;
        double valorAlmacenableR=0;
        int almacenarEXP=0;
        int iteraciones=0;
        double almacenarResulX[]=new double[100];
        double almacenarExponente[] = new double[100];
        String valorPrueba = "";
        int indicador = 1;
        String errorRestriccion =MerrorText.getText();
        String inferiorRestriccion=MinferiorText.getText();
        String intermedioRestriccion=MsuperiorText.getText();
        String superiorRestriccion=MsuperiorText.getText();
        if(errorRestriccion.isEmpty()||inferiorRestriccion.isEmpty()||intermedioRestriccion.isEmpty()||superiorRestriccion.isEmpty()){
            JOptionPane.showMessageDialog(null, "No dejes casillas vacias");//Mensaje casilla vacia
        }else{
            iteraciones= Integer.parseInt(MerrorText.getText());
            inferior = Double.parseDouble(MinferiorText.getText());
            intermedio=Double.parseDouble(MintermedioText.getText());
            superior = Double.parseDouble(MsuperiorText.getText());
            try{
                indicador=Integer.parseInt(JOptionPane.showInputDialog(null, "Ingresa 1 si quieres añadir un valor y 2 si quieres dejar de ingresar", valorPrueba));
                try{
                    while(indicador==1){
                        resultadoValorExponente=Double.parseDouble(JOptionPane.showInputDialog(null, "Ingresa el exponente que tiene tu x", valorPrueba));
                        funcionFA=Math.pow(inferior, resultadoValorExponente);
                        funcionFB=Math.pow(superior, resultadoValorExponente);
                        funcionFR=Math.pow(intermedio, resultadoValorExponente);
                        resultadoValorConX=Double.parseDouble(JOptionPane.showInputDialog(null, "Ingresa el valor de la constante que acompaña a la X", valorPrueba));
                        indicador=Integer.parseInt(JOptionPane.showInputDialog(null, "Ingresa 1 si quieres añadir un valor y 2 si quieres dejar de ingresar", valorPrueba));
                        valorTotalFA=valorTotalFA+resultadoValorConX*(funcionFA);
                        valorTotalFB=valorTotalFB+resultadoValorConX*(funcionFB);
                        valorTotalFR=valorTotalFR+resultadoValorConX*(funcionFR);
                        almacenarExponente[almacenarEXP]=resultadoValorExponente;
                        almacenarResulX[almacenarEXP]=resultadoValorConX;
                        almacenarEXP++;
                    }
                    if (indicador==2){
                        JOptionPane.showMessageDialog(null, "Funcion grabada");
                        valorHO=intermedio-inferior;
                        valorH1=superior-intermedio;
                        valorDeltaO=(valorTotalFR-valorTotalFA)/(intermedio -inferior);
                        valorDelta1=(valorTotalFB-valorTotalFR)/(superior -intermedio);
                        vA=(valorDelta1-valorDeltaO)/(valorH1+valorHO);
                        vB=vA*(valorH1)+valorDelta1;
                        vC=valorTotalFB;
                        if(vB>0){
                            valorR=superior+((-2*vC)/(vB+Math.sqrt(Math.pow(vB, 2)-4*(vA*vC))));
                        }else{
                            valorR=superior+((-2*vC)/(vB-Math.sqrt(Math.pow(vB, 2)-4*(vA*vC))));
                        }                                   
                        mullerTable.setText(mullerTable.getText()+"\nIteracion: 1"+
                            "\nXo: "+inferior+
                            "\n X1: "+intermedio+
                            "\n X2: "+superior+
                            "\n f(Xo): "+valorTotalFA+
                            "\n f(X1): "+valorTotalFR+
                            "\n f(X2): "+valorTotalFB+
                                "\n Ho: "+valorHO+
                                "\n H1: "+valorH1+
                                "\n δo: "+valorDeltaO+
                                "\n δ1: "+valorDelta1+
                                "\n a: "+vA+
                                "\n b: "+vB+
                                "\n c: "+vC+
                                "\n X3: "+valorR+"\n");
                        for (int i = 2; i <= iteraciones; i++) {
                            inferior=intermedio;
                            intermedio=superior;
                            superior=valorR;
                            valorTotalFA=valorTotalFR;
                            valorTotalFR=valorTotalFB;
                            valorTotalFB=0;
                            valorAlmacenableR=valorR;
                            for (int j = 0; j < almacenarEXP; j++) {
                                funcionFB=Math.pow(superior, almacenarExponente[j]);
                                valorTotalFB=valorTotalFB+almacenarResulX[j]*(funcionFB);
                            }
                            valorHO=intermedio-inferior;
                            valorH1=superior-intermedio;
                            valorDeltaO=(valorTotalFR-valorTotalFA)/(intermedio -inferior);
                            valorDelta1=(valorTotalFB-valorTotalFR)/(superior -intermedio);
                            vA=(valorDelta1-valorDeltaO)/(valorH1+valorHO);
                            vB=vA*(valorH1)+valorDelta1;
                            vC=valorTotalFB;
                            if(vB>0){
                                valorR=superior+((-2*vC)/(vB+Math.sqrt(Math.pow(vB, 2)-4*(vA*vC))));
                            }else{
                                valorR=superior+((-2*vC)/(vB-Math.sqrt(Math.pow(vB, 2)-4*(vA*vC))));
                            }
                            errorAbsoluto=Math.abs((valorR-valorAlmacenableR)/valorR)*100;
                            mullerTable.setText(mullerTable.getText()+"\nIteracion: "+i+
                                "\nXo: "+inferior+
                                "\n X1: "+intermedio+
                                "\n X2: "+superior+
                                "\n f(Xo): "+valorTotalFA+
                                "\n f(X1): "+valorTotalFR+
                                "\n f(X2): "+valorTotalFB+
                                "\n Ho: "+valorHO+
                                "\n H1: "+valorH1+
                                "\n δo: "+valorDeltaO+
                                "\n δ1: "+valorDelta1+
                                "\n a: "+vA+
                                "\n b: "+vB+
                                "\n c: "+vC+
                                "\n X3: "+valorR+
                                "\n Ea% "+errorAbsoluto+"\n");
                        }
                    }
                    if (indicador!=2&indicador!=1){
                        JOptionPane.showMessageDialog(null, "Error escribe valor válido");
                        indicador=Integer.parseInt(JOptionPane.showInputDialog(null, "Ingresa 1 si quieres añadir un valor y 2 si quieres dejar de ingresar", valorPrueba));
                    }
                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Error escribe valor válido");
                    indicador=Integer.parseInt(JOptionPane.showInputDialog(null, "Ingresa 1 si quieres añadir un valor y 2 si quieres dejar de ingresar", valorPrueba));
                }

            }catch(Exception e){
                JOptionPane.showMessageDialog(null, "Error escribe valor válido");
                indicador=Integer.parseInt(JOptionPane.showInputDialog(null, "Ingresa 1 si quieres añadir un valor y 2 si quieres dejar de ingresar", valorPrueba));
            }

        }
        mullerTable.setText(mullerTable.getText()+"\n--------------------------------------------\n");
        String[] nombresColumnas = {"Iteraciones", "xa", "xb", "xr", "f(a)", "f(r)", "f(a)f(r)", "Ea(%)", "Et(%)"};
        Object[][] datosFila = {
            {1, superior, inferior, valorR, valorTotalFA, valorTotalFR, valorFAxFR}

        };
        JTable tabla=new JTable(datosFila, nombresColumnas);
        //tabla=biseccionTable;
        add(new JScrollPane(tabla), BorderLayout.CENTER);
    }//GEN-LAST:event_MenviarButtonActionPerformed

    private void NlimpiarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NlimpiarButtonActionPerformed
        NerrorText.setText("");
        NinferiorText.setText("");
    }//GEN-LAST:event_NlimpiarButtonActionPerformed

    private void NinferiorTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NinferiorTextKeyTyped
        //Combinacion de que la tecla se presione y se suelte
        char comprobarSiEsLetra = evt.getKeyChar();//Creamos variable tipo caracter para que no pueda escribir letras
        if(Character.isLetter(comprobarSiEsLetra)){//Comprobamos si el usuario escribe letras
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir letras, unicamente digitos");//Mensaje condicional no escribir letras
        }
    }//GEN-LAST:event_NinferiorTextKeyTyped

    private void NinferiorTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NinferiorTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NinferiorTextActionPerformed

    private void NerrorTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NerrorTextKeyTyped
        //Combinacion de que la tecla se presione y se suelte
        char comprobarSiEsLetra = evt.getKeyChar();//Creamos variable tipo caracter para que no pueda escribir letras
        if(Character.isLetter(comprobarSiEsLetra)){//Comprobamos si el usuario escribe letras
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir letras, unicamente digitos");//Mensaje condicional no escribir letras
        }
    }//GEN-LAST:event_NerrorTextKeyTyped

    private void NenviarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NenviarButtonActionPerformed
        double resultadoValorConX = 0;
        double resultadoValorExponente = 0;
        double funcionFA;
        double funcionFR;
        double valorR = 0;
        double valorFAxFR = 0;
        double valorTotalFA = 0;
        double valorTotalFR = 0;
        double errorAbsoluto=0;
        double valorAlmacenableR=0;
        int almacenarEXP=0;
        int iteraciones=0;
        double almacenarResulX[]=new double[100];
        double almacenarExponente[] = new double[100];
        String valorPrueba = "";
        int indicador = 1;
        String errorRestriccion =NerrorText.getText();
        String inferiorRestriccion=NinferiorText.getText();
        if(errorRestriccion.isEmpty()||inferiorRestriccion.isEmpty()){
            JOptionPane.showMessageDialog(null, "No dejes casillas vacias");//Mensaje casilla vacia
        }else{
            iteraciones= Integer.parseInt(NerrorText.getText());
            inferior = Double.parseDouble(NinferiorText.getText());
            valorR=inferior;
            try{
                indicador=Integer.parseInt(JOptionPane.showInputDialog(null, "Ingresa 1 si quieres añadir un valor y 2 si quieres dejar de ingresar", valorPrueba));
                try{
                    while(indicador==1){
                        resultadoValorExponente=Double.parseDouble(JOptionPane.showInputDialog(null, "Ingresa el exponente que tiene tu x", valorPrueba));
                        funcionFA=Math.pow(inferior, resultadoValorExponente);
                        funcionFR=Math.pow(valorR, resultadoValorExponente-1);
                        resultadoValorConX=Double.parseDouble(JOptionPane.showInputDialog(null, "Ingresa el valor de la constante que acompaña a la X", valorPrueba));
                        indicador=Integer.parseInt(JOptionPane.showInputDialog(null, "Ingresa 1 si quieres añadir un valor y 2 si quieres dejar de ingresar", valorPrueba));
                        valorTotalFA=valorTotalFA+resultadoValorConX*(funcionFA);
                        valorTotalFR=valorTotalFR+resultadoValorExponente*resultadoValorConX*(funcionFR);
                        almacenarExponente[almacenarEXP]=resultadoValorExponente;
                        almacenarResulX[almacenarEXP]=resultadoValorConX;
                        almacenarEXP++;
                    }
                    if (indicador==2){
                        JOptionPane.showMessageDialog(null, "Funcion grabada");
                        valorFAxFR=valorTotalFA/valorTotalFR; 
                        newtonTable.setText(newtonTable.getText()+"\nIteracion: 1"+
                            "\nXi: "+inferior+
                            "\n f(xi): "+valorTotalFA+
                            "\n f'(xi): "+valorTotalFR+
                            "\n f(xi)/f'(xi): "+valorFAxFR+"\n");
                        for (int i = 2; i <= iteraciones; i++) {
                            valorAlmacenableR=inferior;
                            inferior=inferior-valorFAxFR;
                            valorTotalFA=0;
                            valorTotalFR=0;
                            valorR=inferior;
                            for (int j = 0; j < almacenarEXP; j++) {
                                funcionFA=Math.pow(inferior, almacenarExponente[j]);
                                funcionFR=Math.pow(valorR, almacenarExponente[j]-1);
                                valorTotalFA=valorTotalFA+almacenarResulX[j]*(funcionFA);
                                valorTotalFR=valorTotalFR+almacenarResulX[j]*almacenarExponente[j]*(funcionFR);
                            }
                            valorFAxFR=valorTotalFA/valorTotalFR;
                            errorAbsoluto=Math.abs((valorR-valorAlmacenableR)/valorR)*100;
                            newtonTable.setText(newtonTable.getText()+"\nIteracion: "+i+
                                "\nXi: "+inferior+
                                "\n f(xi): "+valorTotalFA+
                                "\n f'(xi): "+valorTotalFR+
                                "\n f(xi)/f'(xi): "+valorFAxFR+
                                "\n Ea% "+errorAbsoluto+"\n");

                        }

                    }
                    if (indicador!=2&indicador!=1){
                        JOptionPane.showMessageDialog(null, "Error escribe valor válido");
                        indicador=Integer.parseInt(JOptionPane.showInputDialog(null, "Ingresa 1 si quieres añadir un valor y 2 si quieres dejar de ingresar", valorPrueba));
                    }
                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Error escribe valor válido");
                    indicador=Integer.parseInt(JOptionPane.showInputDialog(null, "Ingresa 1 si quieres añadir un valor y 2 si quieres dejar de ingresar", valorPrueba));
                }

            }catch(Exception e){
                JOptionPane.showMessageDialog(null, "Error escribe valor válido");
                indicador=Integer.parseInt(JOptionPane.showInputDialog(null, "Ingresa 1 si quieres añadir un valor y 2 si quieres dejar de ingresar", valorPrueba));
            }

        }
        newtonTable.setText(newtonTable.getText()+"\n--------------------------------------------\n");
        String[] nombresColumnas = {"Iteraciones", "xa", "xb", "xr", "f(a)", "f(r)", "f(a)f(r)", "Ea(%)", "Et(%)"};
        Object[][] datosFila = {
            {1, superior, inferior, valorR, valorTotalFA, valorTotalFR, valorFAxFR}

        };
        JTable tabla=new JTable(datosFila, nombresColumnas);
        //tabla=biseccionTable;
        add(new JScrollPane(tabla), BorderLayout.CENTER);
    }//GEN-LAST:event_NenviarButtonActionPerformed

    private void FlimpiarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FlimpiarButtonActionPerformed
        FerrorText.setText("");
        FinferiorText.setText("");
        FsuperiorText.setText("");
    }//GEN-LAST:event_FlimpiarButtonActionPerformed

    private void FsuperiorTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FsuperiorTextKeyTyped
        //Combinacion de que la tecla se presione y se suelte
        char comprobarSiEsLetra = evt.getKeyChar();//Creamos variable tipo caracter para que no pueda escribir letras
        if(Character.isLetter(comprobarSiEsLetra)){//Comprobamos si el usuario escribe letras
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir letras, unicamente digitos");//Mensaje condicional no escribir letras
        }
    }//GEN-LAST:event_FsuperiorTextKeyTyped

    private void FinferiorTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FinferiorTextKeyTyped
        //Combinacion de que la tecla se presione y se suelte
        char comprobarSiEsLetra = evt.getKeyChar();//Creamos variable tipo caracter para que no pueda escribir letras
        if(Character.isLetter(comprobarSiEsLetra)){//Comprobamos si el usuario escribe letras
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir letras, unicamente digitos");//Mensaje condicional no escribir letras
        }
    }//GEN-LAST:event_FinferiorTextKeyTyped

    private void FinferiorTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FinferiorTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FinferiorTextActionPerformed

    private void FerrorTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FerrorTextKeyTyped
        //Combinacion de que la tecla se presione y se suelte
        char comprobarSiEsLetra = evt.getKeyChar();//Creamos variable tipo caracter para que no pueda escribir letras
        if(Character.isLetter(comprobarSiEsLetra)){//Comprobamos si el usuario escribe letras
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir letras, unicamente digitos");//Mensaje condicional no escribir letras
        }
    }//GEN-LAST:event_FerrorTextKeyTyped

    private void FenviarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FenviarButtonActionPerformed
        double resultadoValorConX = 0;
        double resultadoValorExponente = 0;
        double funcionFA;
        double funcionFB = 0;
        double funcionFR;
        double valorR = 0;
        double valorFAxFR = 0;
        double valorTotalFA = 0;
        double valorTotalFB = 0;
        double valorTotalFR = 0;
        double errorAbsoluto=0;
        double valorAlmacenableR=0;
        int almacenarEXP=0;
        int iteraciones=0;
        double almacenarResulX[]=new double[100];
        double almacenarExponente[] = new double[100];
        String valorPrueba = "";
        int indicador = 1;
        String errorRestriccion =FerrorText.getText();
        String inferiorRestriccion=FinferiorText.getText();
        String superiorRestriccion=FsuperiorText.getText();
        if(errorRestriccion.isEmpty()||inferiorRestriccion.isEmpty()||superiorRestriccion.isEmpty()){
            JOptionPane.showMessageDialog(null, "No dejes casillas vacias");//Mensaje casilla vacia
        }else{
            iteraciones= Integer.parseInt(FerrorText.getText());
            inferior = Double.parseDouble(FinferiorText.getText());
            superior = Double.parseDouble(FsuperiorText.getText());
            valorR=(inferior+superior)/2;
            try{
                indicador=Integer.parseInt(JOptionPane.showInputDialog(null, "Ingresa 1 si quieres añadir un valor y 2 si quieres dejar de ingresar", valorPrueba));
                try{
                    while(indicador==1){
                        resultadoValorExponente=Double.parseDouble(JOptionPane.showInputDialog(null, "Ingresa el exponente que tiene tu x", valorPrueba));
                        funcionFA=Math.pow(inferior, resultadoValorExponente);
                        funcionFB=Math.pow(superior, resultadoValorExponente);
                        funcionFR=Math.pow(valorR, resultadoValorExponente);
                        resultadoValorConX=Double.parseDouble(JOptionPane.showInputDialog(null, "Ingresa el valor de la constante que acompaña a la X", valorPrueba));
                        indicador=Integer.parseInt(JOptionPane.showInputDialog(null, "Ingresa 1 si quieres añadir un valor y 2 si quieres dejar de ingresar", valorPrueba));
                        valorTotalFA=valorTotalFA+resultadoValorConX*(funcionFA);
                        valorTotalFB=valorTotalFB+resultadoValorConX*(funcionFB);
                        valorTotalFR=valorTotalFR+resultadoValorConX*(funcionFR);
                        almacenarExponente[almacenarEXP]=resultadoValorExponente;
                        almacenarResulX[almacenarEXP]=resultadoValorConX;
                        almacenarEXP++;
                    }
                    if (indicador==2){
                        JOptionPane.showMessageDialog(null, "Funcion grabada");
                        valorR=superior-((valorTotalFB*(superior-inferior))/(valorTotalFB-valorTotalFA));
                        valorFAxFR=valorTotalFA*valorTotalFR;
                        falsaPosicionTable.setText(falsaPosicionTable.getText()+"\nIteracion: 1"+
                            "\nXa: "+inferior+
                            "\n Xb: "+superior+
                            "\n Xr: "+valorR+
                            "\n f(a): "+valorTotalFA+
                            "\n f(r): "+valorTotalFR+
                            "\n f(a)*f(r): "+valorFAxFR+"\n");
                        for (int i = 2; i <= iteraciones; i++) {
                            valorTotalFA=0;
                            valorTotalFR=0;
                            inferior=valorR;
                            valorAlmacenableR=valorR;
                            for (int j = 0; j < almacenarEXP; j++) {
                                funcionFA=Math.pow(inferior, almacenarExponente[j]);
                                valorTotalFA=valorTotalFA+almacenarResulX[j]*(funcionFA);
                                valorTotalFB=valorTotalFB+almacenarResulX[j]*(funcionFB);
                            }
                            valorR=superior-((valorTotalFB*(superior-inferior))/(valorTotalFB-valorTotalFA));
                            for (int j = 0; j < almacenarEXP; j++) {
                                funcionFR=Math.pow(valorR, almacenarExponente[j]);
                                valorTotalFR=valorTotalFR+almacenarResulX[j]*(funcionFR);
                            }
                            valorFAxFR=valorTotalFA*valorTotalFR;
                            errorAbsoluto=Math.abs((valorR-valorAlmacenableR)/valorR)*100;
                            falsaPosicionTable.setText(falsaPosicionTable.getText()+"\nIteracion: "+i+
                                "\nXa: "+inferior+
                                "\n Xb: "+superior+
                                "\n Xr: "+valorR+
                                "\n f(a): "+valorTotalFA+
                                "\n f(b): "+valorTotalFB+
                                "\n f(r): "+valorTotalFR+
                                "\n f(a)*f(r): "+valorFAxFR+
                                "\n Ea% "+errorAbsoluto+"\n");
                        }

                    }
                    if (indicador!=2&indicador!=1){
                        JOptionPane.showMessageDialog(null, "Error escribe valor válido");
                        indicador=Integer.parseInt(JOptionPane.showInputDialog(null, "Ingresa 1 si quieres añadir un valor y 2 si quieres dejar de ingresar", valorPrueba));
                    }
                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Error escribe valor válido");
                    indicador=Integer.parseInt(JOptionPane.showInputDialog(null, "Ingresa 1 si quieres añadir un valor y 2 si quieres dejar de ingresar", valorPrueba));
                }

            }catch(Exception e){
                JOptionPane.showMessageDialog(null, "Error escribe valor válido");
                indicador=Integer.parseInt(JOptionPane.showInputDialog(null, "Ingresa 1 si quieres añadir un valor y 2 si quieres dejar de ingresar", valorPrueba));
            }

        }
        falsaPosicionTable.setText(falsaPosicionTable.getText()+"\n--------------------------------------------\n");
        String[] nombresColumnas = {"Iteraciones", "xa", "xb", "xr", "f(a)", "f(r)", "f(a)f(r)", "Ea(%)", "Et(%)"};
        Object[][] datosFila = {
            {1, superior, inferior, valorR, valorTotalFA, valorTotalFR, valorFAxFR}

        };
        JTable tabla=new JTable(datosFila, nombresColumnas);
        //tabla=biseccionTable;
        add(new JScrollPane(tabla), BorderLayout.CENTER);
    }//GEN-LAST:event_FenviarButtonActionPerformed

    private void SlimpiarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SlimpiarButtonActionPerformed
        SerrorText.setText("");
        SinferiorText.setText("");
        SsuperiorText.setText("");
    }//GEN-LAST:event_SlimpiarButtonActionPerformed

    private void SsuperiorTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SsuperiorTextKeyTyped
        //Combinacion de que la tecla se presione y se suelte
        char comprobarSiEsLetra = evt.getKeyChar();//Creamos variable tipo caracter para que no pueda escribir letras
        if(Character.isLetter(comprobarSiEsLetra)){//Comprobamos si el usuario escribe letras
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir letras, unicamente digitos");//Mensaje condicional no escribir letras
        }
    }//GEN-LAST:event_SsuperiorTextKeyTyped

    private void SinferiorTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SinferiorTextKeyTyped
        //Combinacion de que la tecla se presione y se suelte
        char comprobarSiEsLetra = evt.getKeyChar();//Creamos variable tipo caracter para que no pueda escribir letras
        if(Character.isLetter(comprobarSiEsLetra)){//Comprobamos si el usuario escribe letras
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir letras, unicamente digitos");//Mensaje condicional no escribir letras
        }
    }//GEN-LAST:event_SinferiorTextKeyTyped

    private void SinferiorTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SinferiorTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SinferiorTextActionPerformed

    private void SerrorTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SerrorTextKeyTyped
        //Combinacion de que la tecla se presione y se suelte
        char comprobarSiEsLetra = evt.getKeyChar();//Creamos variable tipo caracter para que no pueda escribir letras
        if(Character.isLetter(comprobarSiEsLetra)){//Comprobamos si el usuario escribe letras
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir letras, unicamente digitos");//Mensaje condicional no escribir letras
        }
    }//GEN-LAST:event_SerrorTextKeyTyped

    private void SenviarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SenviarButtonActionPerformed
        double resultadoValorConX = 0;
        double resultadoValorExponente = 0;
        double funcionFA;
        double funcionFB = 0;
        double funcionFR;
        double valorR = 0;
        double valorFAxFR = 0;
        double valorTotalFA = 0;
        double valorTotalFB = 0;
        double valorTotalFR = 0;
        double errorAbsoluto=0;
        double valorAlmacenableR=0;
        int almacenarEXP=0;
        int iteraciones=0;
        double almacenarResulX[]=new double[100];
        double almacenarExponente[] = new double[100];
        String valorPrueba = "";
        int indicador = 1;
        String errorRestriccion =SerrorText.getText();
        String inferiorRestriccion=SinferiorText.getText();
        String superiorRestriccion=SsuperiorText.getText();
        if(errorRestriccion.isEmpty()||inferiorRestriccion.isEmpty()||superiorRestriccion.isEmpty()){
            JOptionPane.showMessageDialog(null, "No dejes casillas vacias");//Mensaje casilla vacia
        }else{
            iteraciones= Integer.parseInt(SerrorText.getText());
            inferior = Double.parseDouble(SinferiorText.getText());
            superior = Double.parseDouble(SsuperiorText.getText());
            valorR=(inferior+superior)/2;
            try{
                indicador=Integer.parseInt(JOptionPane.showInputDialog(null, "Ingresa 1 si quieres añadir un valor y 2 si quieres dejar de ingresar", valorPrueba));
                try{
                    while(indicador==1){
                        resultadoValorExponente=Double.parseDouble(JOptionPane.showInputDialog(null, "Ingresa el exponente que tiene tu x", valorPrueba));
                        funcionFA=Math.pow(inferior, resultadoValorExponente);
                        funcionFB=Math.pow(superior, resultadoValorExponente);
                        resultadoValorConX=Double.parseDouble(JOptionPane.showInputDialog(null, "Ingresa el valor de la constante que acompaña a la X", valorPrueba));
                        indicador=Integer.parseInt(JOptionPane.showInputDialog(null, "Ingresa 1 si quieres añadir un valor y 2 si quieres dejar de ingresar", valorPrueba));
                        valorTotalFA=valorTotalFA+resultadoValorConX*(funcionFA);
                        valorTotalFB=valorTotalFB+resultadoValorConX*(funcionFB);
                        almacenarExponente[almacenarEXP]=resultadoValorExponente;
                        almacenarResulX[almacenarEXP]=resultadoValorConX;
                        almacenarEXP++;
                    }
                    if (indicador==2){
                        JOptionPane.showMessageDialog(null, "Funcion grabada");
                        valorR=superior-((valorTotalFB*(superior-inferior))/(valorTotalFB-valorTotalFA));
                        for (int j = 0; j < almacenarEXP; j++) {
                            funcionFR=Math.pow(valorR, almacenarExponente[j]);
                            valorTotalFR=valorTotalFR+almacenarResulX[j]*(funcionFR);
                        }
                        valorFAxFR=valorTotalFA*valorTotalFR;
                        secanteTable.setText(secanteTable.getText()+"\nIteracion: 1"+
                            "\nXa: "+inferior+
                            "\n Xb: "+superior+
                            "\n Xr: "+valorR+
                            "\n f(a): "+valorTotalFA+
                            "\n f(r): "+valorTotalFR+
                            "\n f(a)*f(r): "+valorFAxFR+"\n");
                        for (int i = 2; i <= iteraciones; i++) {
                            valorTotalFA=0;
                            valorTotalFB=0;
                            valorTotalFR=0;
                            inferior=superior;
                            superior =valorR;
                            valorAlmacenableR=valorR;
                            for (int j = 0; j < almacenarEXP; j++) {
                                funcionFA=Math.pow(inferior, almacenarExponente[j]);
                                valorTotalFA=valorTotalFA+almacenarResulX[j]*(funcionFA);
                                funcionFB=Math.pow(superior, almacenarExponente[j]);
                                valorTotalFB=valorTotalFB+almacenarResulX[j]*(funcionFB);
                            }
                            valorR=superior-((valorTotalFB*(superior-inferior))/(valorTotalFB-valorTotalFA));
                            for (int j = 0; j < almacenarEXP; j++) {
                                funcionFR=Math.pow(valorR, almacenarExponente[j]);
                                valorTotalFR=valorTotalFR+almacenarResulX[j]*(funcionFR);
                            }
                            valorFAxFR=valorTotalFA*valorTotalFR;
                            errorAbsoluto=Math.abs((valorR-valorAlmacenableR)/valorR)*100;
                            secanteTable.setText(secanteTable.getText()+"\nIteracion: "+i+
                                "\nXa: "+inferior+
                                "\n Xb: "+superior+
                                "\n Xr: "+valorR+
                                "\n f(a): "+valorTotalFA+
                                "\n f(b): "+valorTotalFB+
                                "\n f(r): "+valorTotalFR+
                                "\n f(a)*f(r): "+valorFAxFR+
                                "\n Ea% "+errorAbsoluto+"\n");
                        }

                    }
                    if (indicador!=2&indicador!=1){
                        JOptionPane.showMessageDialog(null, "Error escribe valor válido");
                        indicador=Integer.parseInt(JOptionPane.showInputDialog(null, "Ingresa 1 si quieres añadir un valor y 2 si quieres dejar de ingresar", valorPrueba));
                    }
                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Error escribe valor válido");
                    indicador=Integer.parseInt(JOptionPane.showInputDialog(null, "Ingresa 1 si quieres añadir un valor y 2 si quieres dejar de ingresar", valorPrueba));
                }

            }catch(Exception e){
                JOptionPane.showMessageDialog(null, "Error escribe valor válido");
                indicador=Integer.parseInt(JOptionPane.showInputDialog(null, "Ingresa 1 si quieres añadir un valor y 2 si quieres dejar de ingresar", valorPrueba));
            }

        }
        secanteTable.setText(secanteTable.getText()+"\n--------------------------------------------\n");
        String[] nombresColumnas = {"Iteraciones", "xa", "xb", "xr", "f(a)", "f(r)", "f(a)f(r)", "Ea(%)", "Et(%)"};
        Object[][] datosFila = {
            {1, superior, inferior, valorR, valorTotalFA, valorTotalFR, valorFAxFR}

        };
        JTable tabla=new JTable(datosFila, nombresColumnas);
        //tabla=biseccionTable;
        add(new JScrollPane(tabla), BorderLayout.CENTER);
    }//GEN-LAST:event_SenviarButtonActionPerformed

    private void BlimpiarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlimpiarButtonActionPerformed
        BerrorText.setText("");
        BinferiorText.setText("");
        BsuperiorText.setText("");
    }//GEN-LAST:event_BlimpiarButtonActionPerformed

    private void BsuperiorTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BsuperiorTextKeyTyped
        //Combinacion de que la tecla se presione y se suelte
        char comprobarSiEsLetra = evt.getKeyChar();//Creamos variable tipo caracter para que no pueda escribir letras
        if(Character.isLetter(comprobarSiEsLetra)){//Comprobamos si el usuario escribe letras
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir letras, unicamente digitos");//Mensaje condicional no escribir letras
        }
    }//GEN-LAST:event_BsuperiorTextKeyTyped

    private void BinferiorTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BinferiorTextKeyTyped
        //Combinacion de que la tecla se presione y se suelte
        char comprobarSiEsLetra = evt.getKeyChar();//Creamos variable tipo caracter para que no pueda escribir letras
        if(Character.isLetter(comprobarSiEsLetra)){//Comprobamos si el usuario escribe letras
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir letras, unicamente digitos");//Mensaje condicional no escribir letras
        }
    }//GEN-LAST:event_BinferiorTextKeyTyped

    private void BinferiorTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BinferiorTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BinferiorTextActionPerformed

    private void BerrorTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BerrorTextKeyTyped
        //Combinacion de que la tecla se presione y se suelte
        char comprobarSiEsLetra = evt.getKeyChar();//Creamos variable tipo caracter para que no pueda escribir letras
        if(Character.isLetter(comprobarSiEsLetra)){//Comprobamos si el usuario escribe letras
            evt.consume();//el evento no permite seguir escribiendo
            Toolkit.getDefaultToolkit().beep();//sonido de error
            JOptionPane.showMessageDialog(null, "No puedes escribir letras, unicamente digitos");//Mensaje condicional no escribir letras
        }
    }//GEN-LAST:event_BerrorTextKeyTyped

    private void BenviarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BenviarButtonActionPerformed
        double resultadoValorConX = 0;
        double resultadoValorExponente = 0;
        double funcionFA;
        double funcionFR;
        double valorR = 0;
        double valorFAxFR = 0;
        double valorTotalFA = 0;
        double valorTotalFR = 0;
        double errorAbsoluto=0;
        double valorAlmacenableR=0;
        int almacenarEXP=0;
        int iteraciones=0;
        double almacenarResulX[]=new double[100];
        double almacenarExponente[] = new double[100];
        String valorPrueba = "";
        int indicador = 1;
        String errorRestriccion =BerrorText.getText();
        String inferiorRestriccion=BinferiorText.getText();
        String superiorRestriccion=BsuperiorText.getText();
        if(errorRestriccion.isEmpty()||inferiorRestriccion.isEmpty()||superiorRestriccion.isEmpty()){
            JOptionPane.showMessageDialog(null, "No dejes casillas vacias");//Mensaje casilla vacia
        }else{
            iteraciones= Integer.parseInt(BerrorText.getText());
            inferior = Double.parseDouble(BinferiorText.getText());
            superior = Double.parseDouble(BsuperiorText.getText());
            valorR=(inferior+superior)/2;
            try{
                indicador=Integer.parseInt(JOptionPane.showInputDialog(null, "Ingresa 1 si quieres añadir un valor y 2 si quieres dejar de ingresar", valorPrueba));
                try{
                    while(indicador==1){
                        resultadoValorExponente=Double.parseDouble(JOptionPane.showInputDialog(null, "Ingresa el exponente que tiene tu x", valorPrueba));
                        funcionFA=Math.pow(inferior, resultadoValorExponente);
                        funcionFR=Math.pow(valorR, resultadoValorExponente);
                        resultadoValorConX=Double.parseDouble(JOptionPane.showInputDialog(null, "Ingresa el valor de la constante que acompaña a la X", valorPrueba));
                        indicador=Integer.parseInt(JOptionPane.showInputDialog(null, "Ingresa 1 si quieres añadir un valor y 2 si quieres dejar de ingresar", valorPrueba));
                        valorTotalFA=valorTotalFA+resultadoValorConX*(funcionFA);
                        valorTotalFR=valorTotalFR+resultadoValorConX*(funcionFR);
                        almacenarExponente[almacenarEXP]=resultadoValorExponente;
                        almacenarResulX[almacenarEXP]=resultadoValorConX;
                        almacenarEXP++;
                    }
                    if (indicador==2){
                        JOptionPane.showMessageDialog(null, "Funcion grabada");

                        valorFAxFR=valorTotalFA*valorTotalFR;
                        biseccionTable.setText(biseccionTable.getText()+"\nIteracion: 1"+
                            "\n Xa: "+inferior+
                            "\n Xb: "+superior+
                            "\n Xr: "+valorR+
                            "\n f(a): "+valorTotalFA+
                            "\n f(r): "+valorTotalFR+
                            "\n f(a)*f(r): "+valorFAxFR+"\n");
                            if(valorFAxFR<0){
                                biseccionTable.setText(biseccionTable.getText()+"es negativo izquierdo Xb=Xr\n");
                            }else{
                                biseccionTable.setText(biseccionTable.getText()+"es positivo derecho Xa=Xr\n");
                            }
                        for (int i = 2; i <= iteraciones; i++) {
                            if(valorFAxFR<0){
                                valorTotalFA=0;
                                valorTotalFR=0;
                                superior=valorR;
                                valorAlmacenableR=valorR;
                                valorR=(inferior+superior)/2;
                                for (int j = 0; j < almacenarEXP; j++) {
                                    funcionFA=Math.pow(inferior, almacenarExponente[j]);
                                    funcionFR=Math.pow(valorR, almacenarExponente[j]);
                                    valorTotalFA=valorTotalFA+almacenarResulX[j]*(funcionFA);
                                    valorTotalFR=valorTotalFR+almacenarResulX[j]*(funcionFR);
                                }
                                valorFAxFR=valorTotalFA*valorTotalFR;
                                errorAbsoluto=Math.abs((valorR-valorAlmacenableR)/valorR)*100;
                                biseccionTable.setText(biseccionTable.getText()+"\nIteracion: "+i+
                                    "\n Xa: "+inferior+
                                    "\n Xb: "+superior+
                                    "\n Xr: "+valorR+
                                    "\n f(a): "+valorTotalFA+
                                    "\n f(r): "+valorTotalFR+
                                    "\n f(a)*f(r): "+valorFAxFR+
                                    "\n Ea% "+errorAbsoluto);
                                if(valorFAxFR<0){
                                    biseccionTable.setText(biseccionTable.getText()+"\nes negativo izquierdo Xb=Xr\n");
                                }else{
                                    biseccionTable.setText(biseccionTable.getText()+"\nes positivo derecho Xa=Xr\n");
                                }
                            }
                            else{
                                valorTotalFA=0;
                                valorTotalFR=0;
                                inferior=valorR;
                                valorAlmacenableR=valorR;
                                valorR=(inferior+superior)/2;
                                for (int j = 0; j < almacenarEXP; j++) {
                                    funcionFA=Math.pow(inferior, almacenarExponente[j]);
                                    funcionFR=Math.pow(valorR, almacenarExponente[j]);
                                    valorTotalFA=valorTotalFA+almacenarResulX[j]*(funcionFA);
                                    valorTotalFR=valorTotalFR+almacenarResulX[j]*(funcionFR);
                                }
                                valorFAxFR=valorTotalFA*valorTotalFR;
                                errorAbsoluto=Math.abs((valorR-valorAlmacenableR)/valorR)*100;
                                biseccionTable.setText(biseccionTable.getText()+"\nIteracion: "+i+
                                    "\n Xa: "+inferior+
                                    "\n Xb: "+superior+
                                    "\n Xr: "+valorR+
                                    "\n f(a): "+valorTotalFA+
                                    "\n f(r): "+valorTotalFR+
                                    "\n f(a)*f(r): "+valorFAxFR+
                                    "\n Ea% "+errorAbsoluto);
                                if(valorFAxFR<0){
                                    biseccionTable.setText(biseccionTable.getText()+"\nes negativo izquierdo Xb=Xr\n");
                                }else{
                                    biseccionTable.setText(biseccionTable.getText()+"\nes positivo derecho Xa=Xr\n");
                                }
                            }
                        }

                    }
                    if (indicador!=2&indicador!=1){
                        JOptionPane.showMessageDialog(null, "Error escribe valor válido");
                        indicador=Integer.parseInt(JOptionPane.showInputDialog(null, "Ingresa 1 si quieres añadir un valor y 2 si quieres dejar de ingresar", valorPrueba));
                    }
                }catch(Exception e){
                    JOptionPane.showMessageDialog(null, "Error escribe valor válido");
                    indicador=Integer.parseInt(JOptionPane.showInputDialog(null, "Ingresa 1 si quieres añadir un valor y 2 si quieres dejar de ingresar", valorPrueba));
                }

            }catch(Exception e){
                JOptionPane.showMessageDialog(null, "Error escribe valor válido");
                indicador=Integer.parseInt(JOptionPane.showInputDialog(null, "Ingresa 1 si quieres añadir un valor y 2 si quieres dejar de ingresar", valorPrueba));
            }

        }
        biseccionTable.setText(biseccionTable.getText()+"\n--------------------------------------------\n");
        String[] nombresColumnas = {"Iteraciones", "xa", "xb", "xr", "f(a)", "f(r)", "f(a)f(r)", "Ea(%)", "Et(%)"};
        Object[][] datosFila = {
            {1, superior, inferior, valorR, valorTotalFA, valorTotalFR, valorFAxFR}

        };
        
        JTable tabla=new JTable(datosFila, nombresColumnas);
        //tabla=biseccionTable;
        add(new JScrollPane(tabla), BorderLayout.CENTER);
        
    }//GEN-LAST:event_BenviarButtonActionPerformed

    private void botonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLimpiarActionPerformed
        biseccionTable.setText("");
    }//GEN-LAST:event_botonLimpiarActionPerformed

    private void botonLimpiar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLimpiar1ActionPerformed
        secanteTable.setText("");
    }//GEN-LAST:event_botonLimpiar1ActionPerformed

    private void botonLimpiar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLimpiar2ActionPerformed
        falsaPosicionTable.setText("");
    }//GEN-LAST:event_botonLimpiar2ActionPerformed

    private void botonLimpiar3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLimpiar3ActionPerformed
        newtonTable.setText("");
    }//GEN-LAST:event_botonLimpiar3ActionPerformed

    private void botonLimpiar4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLimpiar4ActionPerformed
        mullerTable.setText("");
    }//GEN-LAST:event_botonLimpiar4ActionPerformed

    private void SalirDelSistema1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirDelSistema1ActionPerformed
        JOptionPane.showMessageDialog(null, "Abriendo excel");       
        if(java.awt.Desktop.isDesktopSupported()){//Revisamos las cosas por defecto
            java.awt.Desktop escritorio = java.awt.Desktop.getDesktop();
            if(escritorio.isSupported(java.awt.Desktop.Action.BROWSE)){ //Seleccionamos un navegador
                try {
                    java.net.URI link = new java.net.URI("https://docs.google.com/spreadsheets/d/15sIbfcTUcF_a_iJYbw1DSIXZa2ZoVYhXPq1uOF0HD44/edit#gid=1582561436");//Establecemos el link
                    escritorio.browse(link);//Hacemos que nos envie al link ingresado
                } catch (URISyntaxException ex) {
                    Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
                }                        
            }
        }
    }//GEN-LAST:event_SalirDelSistema1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BenviarButton;
    private javax.swing.JTextField BerrorText;
    private javax.swing.JTextField BinferiorText;
    private javax.swing.JLabel Bingreso;
    private javax.swing.JLabel Biteraciones;
    private javax.swing.JLabel BlimInferior;
    private javax.swing.JLabel BlimSuperior;
    private javax.swing.JButton BlimpiarButton;
    private javax.swing.JTextField BsuperiorText;
    private javax.swing.JButton FenviarButton;
    private javax.swing.JTextField FerrorText;
    private javax.swing.JTextField FinferiorText;
    private javax.swing.JLabel Fingreso;
    private javax.swing.JLabel Fiteraciones;
    private javax.swing.JLabel FlimInferior;
    private javax.swing.JLabel FlimSuperior;
    private javax.swing.JButton FlimpiarButton;
    private javax.swing.JTextField FsuperiorText;
    private javax.swing.JButton MenviarButton;
    private javax.swing.JTextField MerrorText;
    private javax.swing.JTextField MinferiorText;
    private javax.swing.JLabel Mingreso;
    private javax.swing.JTextField MintermedioText;
    private javax.swing.JLabel Miteraciones;
    private javax.swing.JLabel MlimInferior;
    private javax.swing.JLabel MlimIntermedio;
    private javax.swing.JLabel MlimSuperior;
    private javax.swing.JButton MlimpiarButton;
    private javax.swing.JTextField MsuperiorText;
    private javax.swing.JButton NenviarButton;
    private javax.swing.JTextField NerrorText;
    private javax.swing.JTextField NinferiorText;
    private javax.swing.JLabel Ningreso;
    private javax.swing.JLabel Niteraciones;
    private javax.swing.JLabel NlimInferior;
    private javax.swing.JButton NlimpiarButton;
    private javax.swing.JButton SalirDelSistema;
    private javax.swing.JButton SalirDelSistema1;
    private javax.swing.JButton SenviarButton;
    private javax.swing.JTextField SerrorText;
    private javax.swing.JTextField SinferiorText;
    private javax.swing.JLabel Singreso;
    private javax.swing.JLabel Siteraciones;
    private javax.swing.JLabel SlimInferior;
    private javax.swing.JLabel SlimSuperior;
    private javax.swing.JButton SlimpiarButton;
    private javax.swing.JTextField SsuperiorText;
    private javax.swing.JLabel T1;
    private javax.swing.JLabel T2;
    private javax.swing.JLabel T3;
    private javax.swing.JLabel T5;
    private javax.swing.JLabel T6;
    private javax.swing.JTextArea biseccionTable;
    private javax.swing.JButton botonLimpiar;
    private javax.swing.JButton botonLimpiar1;
    private javax.swing.JButton botonLimpiar2;
    private javax.swing.JButton botonLimpiar3;
    private javax.swing.JButton botonLimpiar4;
    private javax.swing.JTextArea falsaPosicionTable;
    private javax.swing.JLabel formulaErrorAbsoluto1;
    private javax.swing.JLabel formulaErrorAbsoluto2;
    private javax.swing.JLabel formulaErrorAbsoluto3;
    private javax.swing.JLabel formulaErrorAbsoluto4;
    private javax.swing.JLabel formulaErrorAbsoluto5;
    private javax.swing.JDesktopPane jDesktopPane2;
    private javax.swing.JDesktopPane jDesktopPane3;
    private javax.swing.JDesktopPane jDesktopPane4;
    private javax.swing.JDesktopPane jDesktopPane6;
    private javax.swing.JDesktopPane jDesktopPane7;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane6;
    private javax.swing.JLabel logo;
    private javax.swing.JLabel logo1;
    private javax.swing.JLabel logo2;
    private javax.swing.JLabel logo3;
    private javax.swing.JTextArea mullerTable;
    private javax.swing.JTextArea newtonTable;
    private javax.swing.JTextArea secanteTable;
    private javax.swing.JTextArea textoExtra;
    private javax.swing.JTextArea textoExtra1;
    private javax.swing.JTextArea textoExtra2;
    private javax.swing.JTextArea textoExtra3;
    private javax.swing.JTextArea textoExtra4;
    private javax.swing.JLabel tituloTextoExtra;
    private javax.swing.JLabel tituloTextoExtra1;
    private javax.swing.JLabel tituloTextoExtra2;
    private javax.swing.JLabel tituloTextoExtra3;
    private javax.swing.JLabel tituloTextoExtra4;
    // End of variables declaration//GEN-END:variables

}
